@article{EHH+13,
author = {Eckardt, Tobias and Heinzemann, Christian and Henkler, Stefan and Hirsch, Martin and Priesterjahn, Claudia and Sch\"{a}fer, Wilhelm},
title = {Modeling and Verifying Dynamic Communication Structures Based on Graph Transformations},
year = {2013},
issue_date = {February  2013},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {28},
number = {1},
issn = {1865-2034},
url = {https://doi.org/10.1007/s00450-011-0184-y},
doi = {10.1007/s00450-011-0184-y},
abstract = {Current and especially future software systems increasingly exhibit so-called self-* properties (e.g., self-healing or self-optimization). In essence, this means that software in such systems needs to be reconfigurable at run-time to remedy a detected failure or to adjust to a changing environment. Reconfiguration includes adding or deleting (software) components as well as adding or deleting component interaction. As a consequence, the state space of self-* systems becomes so complex, that current verification approaches like model checking or theorem proving usually do not scale. Our approach addresses this problem by firstly defining a system architecture with clearly defined components and their interfaces (ports including the definition of signatures of all events and methods which the port may receive and the component may execute) and so-called coordination patterns. These coordination patterns specify communication protocols based on the definition of the ports only for those component interactions which are defined in the (static) architecture specification by a corresponding connection. Secondly, the reconfiguration of architectures is precisely defined by giving a formal definition of all change operations, e.g., adding or deleting components and component connections. By exploiting this formal definition, it becomes provable that an architecture includes only component connections which correspond to the defined coordination patterns. Then, the verification of safety and liveness properties has to be carried out only for each individual coordination pattern rather than for the system as a whole.},
journal = {Comput. Sci.},
month = {feb},
pages = {3–22},
numpages = {20},
keywords = {Real-time, Self-*, Model checking, Graph transformations, Statecharts}
}

@article{GHH11,
author = {Giese, Holger and Henkler, Stefan and Hirsch, Martin},
title = {A Multi-Paradigm Approach Supporting the Modular Execution of Reconfigurable Hybrid Systems},
year = {2011},
issue_date = {September 2011},
publisher = {Society for Computer Simulation International},
address = {San Diego, CA, USA},
volume = {87},
number = {9},
issn = {0037-5497},
url = {https://doi.org/10.1177/0037549710366824},
doi = {10.1177/0037549710366824},
abstract = {Advanced mechatronic systems have to integrate existing technologies from mechanical, electrical and software engineering. They must be able to adapt their structure and behavior at runtime by reconfiguration to react flexibly to changes in the environment. Therefore, a tight integration of structural and behavioral models of the different domains is required. This integration results in complex reconfigurable hybrid systems, the execution logic of which cannot be addressed directly with existing standard modeling, simulation, and code-generation techniques. We present in this paper how our component-based approach for reconfigurable mechatronic systems, MECHATRONIC UML, efficiently handles the complex interplay of discrete behavior and continuous behavior in a modular manner. In addition, its extension to even more flexible reconfiguration cases is presented.},
journal = {Simulation},
month = {sep},
pages = {775–808},
numpages = {34},
keywords = {hybrid systems, code generation, reconfigurable systems, simulation}
}

@inproceedings{HH11,
author = {Heinzemann, Christian and Henkler, Stefan},
title = {Reusing Dynamic Communication Protocols in Self-Adaptive Embedded Component Architectures},
year = {2011},
isbn = {9781450307239},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2000229.2000246},
doi = {10.1145/2000229.2000246},
abstract = {Component based software engineering aims at re-using components in other systems. This requires a verification whether the component can safely interact with its communication partners in a new environment. Such verification is mandatory in case of safety-critical real-time systems where the communication is characterized by a varying number of components instances all being of the same type. Reuse can be facilitated by separating abstract communication protocol definitions and concrete component implementations. In contrast to standard refinement definitions for real-time systems, our definition explicitly takes varying numbers of communication partners into account. Additionally, we relax the strict conditions of a bisimulation to ease reuse of components. Along with our refinement definition, we provide a formal verification procedure to check for correct refinements which preserves properties verified for the abstract protocol definition. We evaluated our approach using a self-adaptive real-time system from the domain of autonomous train systems. The evaluation results show that checking for correct refinements is more efficient than re-verifying the desired properties on the refined component.},
booktitle = {Proceedings of the 14th International ACM Sigsoft Symposium on Component Based Software Engineering},
pages = {109–118},
numpages = {10},
keywords = {safety-critical systems, refinement, verification, self-adaptive systems, dynamic structures},
location = {Boulder, Colorado, USA},
series = {CBSE '11}
}

@inproceedings{EH10,
author = {Eckardt, Tobias and Henkler, Stefan},
title = {Component Behavior Synthesis for Critical Systems},
year = {2010},
isbn = {3642135552},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-13556-9_4},
doi = {10.1007/978-3-642-13556-9_4},
abstract = {Component-based architectures are widely used in embedded systems. For managing complexity and improving quality separation of concerns is one of the most important principles. For one component, separation of concerns is realized by defining the overall component functionality by separated protocol behaviors. One of the main challenges of applying separation of concerns is the later automatic composition of the separated, maybe interdependent concerns which is not supported by current component-based approaches. Moreover, the complexity of real-time distributed embedded systems requires to consider safety requirements for the composition of the separated concerns. We present an approach which addresses these problems by a well-defined automatic composition of protocol behaviors with respect to interdependent concerns. The composition is performed by taking a proper refinement relation into account so that the analysis results of the separated concerns are preserved which is essential for safety critical systems.},
booktitle = {Proceedings of the First International Conference on Architecting Critical Systems},
pages = {52–71},
numpages = {20},
location = {Prague, Czech Republic},
series = {ISARCS'10}
}

@inproceedings{HOG+10,
author = {Henkler, Stefan and Oberth\^{u}r, Simon and Giese, Holger and Seibel, Andreas},
title = {Model-Driven Runtime Resource Predictions for Advanced Mechatronic Systems with Dynamic Data Structures},
year = {2010},
isbn = {9780769540375},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ISORC.2010.17},
doi = {10.1109/ISORC.2010.17},
abstract = {The next generation of advanced mechatronic systems is expected to enhance their functionality and improve their performance by context-dependent behavior. Therefore, these systems require to represent information about the complex environment and changing sets of collaboration partners internally. This requirement is in contrast to the usually assumed static structures for embedded systems. In this paper, we present a model-driven approach which overcomes this situation by supporting dynamic data structures while still guaranteeing that valid worst-case execution times can be derived. It supports a flexible resource management which avoids to operate with the prohibitive coarse worst-case boundaries but instead supports to run applications in different profiles which guarantee different resource requirements and put unused resources in a profile at other applications' disposal. By supporting the proper estimation of worst case execution time (WCET) and worst case number of iteration (WCNI) at runtime, we can further support to create new profiles, add or remove them at runtime in order to minimize the over-approximation of the resource consumption resulting from the dynamic data structures required for the outlined class of advanced systems.},
booktitle = {Proceedings of the 2010 13th IEEE International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing},
pages = {58–65},
numpages = {8},
keywords = {Safety Critical Systems, Flexible Resource Management, Runtime WCET Analysis, Dynamic Data Structures, Model-Driven Engineering},
series = {ISORC '10}
}

@inproceedings{HMS+10,
author = {Henkler, Stefan and Meyer, Jan and Sch\"{a}fer, Wilhelm and von Detten, Markus and Nickel, Ulrich},
title = {Legacy Component Integration by the Fujaba Real-Time Tool Suite},
year = {2010},
isbn = {9781605587196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1810295.1810349},
doi = {10.1145/1810295.1810349},
abstract = {We present a Tool Suite which supports the (re-)construction of a behavioral model of a legacy component based on a learning approach by exploiting knowledge of known models of the existing component environment. This in turn enables to check whether the legacy component can be integrated correctly into its environment.},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 2},
pages = {267–270},
numpages = {4},
keywords = {integration, safety-critical systems, formal verification, model-driven engineering, legacy system},
location = {Cape Town, South Africa},
series = {ICSE '10}
}

@inproceedings{HGH+09,
author = {Henkler, Stefan and Greenyer, Joel and Hirsch, Martin and Sch\"{a}fer, Wilhelm and Alhawash, Kahtan and Eckardt, Tobias and Heinzemann, Christian and Loffler, Renate and Seibel, Andreas and Giese, Holger},
title = {Synthesis of Timed Behavior from Scenarios in the Fujaba Real-Time Tool Suite},
year = {2009},
isbn = {9781424434534},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSE.2009.5070569},
doi = {10.1109/ICSE.2009.5070569},
abstract = {Based on a well-defined component architecture the tool supports the synthesis of so-called real-time statecharts from timed sequence diagrams. The two step synthesis process addresses the existing scalability problems by a proper decomposition and allows the user to define particular restrictions on the resulting statecharts.},
booktitle = {Proceedings of the 31st International Conference on Software Engineering},
pages = {615–618},
numpages = {4},
series = {ICSE '09}
}

@inbook{GHH08,
author = {Giese, Holger and Henkler, Stefan and Hirsch, Martin},
title = {Combining Formal Verification and Testing for Correct Legacy Component Integration in Mechatronic UML},
year = {2008},
isbn = {9783540855705},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-540-85571-2_11},
abstract = {One of the main benefits of component-based architectures is their support for reuse. The port and interface definitions of architectural components facilitate the construction of complex functionality by composition of existing components. For such a composition means for a sufficient verification either by testing or formal verification are necessary. However, the overwhelming complexity of the interaction of distributed real-time components usually excludes that testing alone can provide the required coverage when integrating a legacy component. In this paper we present a scheme on how embedded legacy components can be tackled. For the embedded legacy components initially a behavioral model is derived from the interface description of the architectural model. This is in the subsequent steps enriched by an incremental synthesis using formal verification techniques for the systematic generation of component tests. The proposed scheme results in an effective combination of testing and formal verification. While verification is employed to tackle the inherently subtle interaction of the distributed real-time components which could not be covered by testing, local testing of the components guided by the verification results is employed to derive refined behavioral models. The approach further has two outstanding benefits. It can pin-point real failures without false negatives right from the beginning. It can also prove the correctness of the integration without learning the whole legacy component (using the restrictions of the integration context).},
booktitle = {Architecting Dependable Systems V},
pages = {248–272},
numpages = {25}
}

@inproceedings{HHG09,
author = {Hirsch, Martin and Henkler, Stefan and Giese, Holger},
title = {Modeling Collaborations with Dynamic Structural Adaptation in Mechatronic UML},
year = {2008},
isbn = {9781605580371},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1370018.1370026},
doi = {10.1145/1370018.1370026},
abstract = {The next generation of advanced mechatronic systems is expected to behave more intelligently than today's systems. These systems are expected to enhance their functionality and improve their performance by building communities of autonomous agents which exploit local and global networking. Such mechatronic systems will therefore include complex coordination protocols which require execution in real-time and reconfiguration of the locally employed control algorithms at runtime to adjust their behavior to the changing system goals leading to self-adaptation. In this paper we will present an extension of the MECHATRONIC UML approach which will enable us to model collaborations between components which include structural adaptation and multi-ports. Besides the modeling of complex collaborations and the rules to join and leave these collaborations via ports and multi-ports, we propose to employ hierarchical state machines with a dynamic number of submachines to model the behavior of the multi-ports. For the collaborations this involves the related protocols, while for the components we have to refine this behavior to ensure a proper synchronization with other parts of the component behavior.},
booktitle = {Proceedings of the 2008 International Workshop on Software Engineering for Adaptive and Self-Managing Systems},
pages = {33–40},
numpages = {8},
keywords = {collaboration, safety, mechatronic systems, dynamic structural adaption},
location = {Leipzig, Germany},
series = {SEAMS '08}
}

@inproceedings{THM+08,
author = {Tichy, Matthias and Henkler, Stefan and Meyer, Matthias and von Detten, Markus},
title = {Safety of Component-Based Systems: Analysis and Improvement Using Fujaba4Eclipse},
year = {2008},
isbn = {9781605580791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1370175.1370214},
doi = {10.1145/1370175.1370214},
abstract = {Todays embedded and safety-critical systems incorporate increasing amounts of software. Consequently, the software architecture and its connection to hardware elements have a big impact on the safety of those systems. We present in this paper an approach and its implementation in the Fujaba4Eclipse environment for the analysis and improvement of component-based systems w.r.t. their safety which specifically exploits the software and system structure.},
booktitle = {Companion of the 30th International Conference on Software Engineering},
pages = {973–974},
numpages = {2},
keywords = {fault tolerance, structual transformations, failure propagation, hazard analysis, safety, fujaba},
location = {Leipzig, Germany},
series = {ICSE Companion '08}
}

@inproceedings{PTH+07,
author = {Priesterjahn, Claudia and Tichy, Matthias and Henkler, Stefan and Hirsch, Martin and Sch\"{a}fer, Wilhelm},
title = {Fujaba4eclipse Real-Time Tool Suite},
year = {2007},
isbn = {3642162762},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {The Fujaba Real-Time Tool Suite supports modeling and verification of software in mechatronic or embedded systems. It also addresses the specification of advanced systems which reconfigure part of their structure and behavior at runtime. The Fujaba Real-Time Tool Suite requires a rigorous development process concerning the use of the different (partially refined) UML diagrams. All diagrams have a formally and well-defined semantics which allow to check models for given safety properties. Further, the tool suite provides a tight integration with software tools used by control engineers like CaMEL-View and Matlab to enable the simulation of production code of a complete system.},
booktitle = {Proceedings of the 2007 International Dagstuhl Conference on Model-Based Engineering of Embedded Real-Time Systems},
pages = {309–315},
numpages = {7},
location = {Dagstuhl Castle, Germany},
series = {MBEERTS'07}
}

@inproceedings{BGH+07,
author = {Burmester, Sven and Giese, Holger and Henkler, Stefan and Hirsch, Martin and Tichy, Matthias and Gambuzza, Alfonso and Munch, Eckehard and Vocking, Henner},
title = {Tool Support for Developing Advanced Mechatronic Systems: Integrating the Fujaba Real-Time Tool Suite with CAMeL-View},
year = {2007},
isbn = {0769528287},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSE.2007.88},
doi = {10.1109/ICSE.2007.88},
abstract = {The next generation of advanced mechatronic systems is expected to use its software to exploit local and global networking capabilities to enhance their functionality and to adapt their local behavior when beneficial. Such systems will therefore include complex hard real-time coordination at the network level. This coordination is further reflected locally by complex reconfiguration in form of mode management and control algorithms. We present in this paper the integration of two tools which allow the integrated specification of real-time coordination and traditional control engineering specifically targeting the required complex reconfiguration of the local behavior.},
booktitle = {Proceedings of the 29th International Conference on Software Engineering},
pages = {801–804},
numpages = {4},
series = {ICSE '07}
}

@article{GH06,
author = {Giese, Holger and Henkler, Stefan},
title = {A Survey of Approaches for the Visual Model-Driven Development of next Generation Software-Intensive Systems},
year = {2006},
issue_date = {December, 2006},
publisher = {Academic Press, Inc.},
address = {USA},
volume = {17},
number = {6},
issn = {1045-926X},
url = {https://doi.org/10.1016/j.jvlc.2006.10.002},
doi = {10.1016/j.jvlc.2006.10.002},
abstract = {Software-intensive systems of the future are expected to be highly distributed and to exhibit adaptive and anticipatory behavior when operating in highly dynamic environments and interfacing with the physical world. Therefore, visual modeling techniques to address these software-intensive systems require a mix of models from a multitude of disciplines such as software engineering, control engineering, and business process engineering. As in this concert of techniques software provides the most flexible element, the integration of these different views can be expected to happen in the software. The software thus includes complex information processing capabilities as well as hard real-time coordination between distributed technical systems and computers. In this article, we identify a number of general requirements for the visual model-driven specification of next generation software-intensive systems. As business process engineering and software engineering are well integrated areas and in order to keep this survey focused, we restrict our attention here to approaches for the visual model-driven development of adaptable software-intensive systems where the integration of software engineering with control engineering concepts and safety issues are important. In this survey, we identify requirements and use them to classify and characterize a number of approaches that can be employed for the development of the considered class of software-intensive systems.},
journal = {J. Vis. Lang. Comput.},
month = {dec},
pages = {528–550},
numpages = {23},
keywords = {Visual modeling, MDD, Software-intensive systems, MDA, Adaptable, Survey}
}

@inproceedings{GH06,
author = {Giese, Holger and Henkler, Stefan},
title = {Architecture-Driven Platform Independent Deterministic Replay for Distributed Hard Real-Time Systems},
year = {2006},
isbn = {1595934596},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1147249.1147253},
doi = {10.1145/1147249.1147253},
abstract = {Distributed hard real-time systems have become a major component of many advanced technical products. Means to ensure their proper quality are thus of paramount importance. To ensure high quality software, besides preventive means also cost-effective techniques for defect removal are important. The later activity in practice includes testing in order to detect failures, subsequent diagnosis in order to pin down the observed failure to a defect, and finally the proper removal of the defect. In this chain of activities, finding the cause of a failure is often a rather difficult and long-winded undertaking. In the domain of embedded real-time systems the problem is even harder than in a standard environment because of the real-time behavior and hardware heterogeneity (development vs. target platform). Both renders the deterministic replay of faulty behavior a hard problem which today can only be addressed when a substantial amount of additional monitoring hardware is added to the system. The paper proposes to minimize the required additional hardware using an architecture-driven approach which exploits the high-level information available at the architectural level in order to achieve platform independent deterministic replay for distributed hard real-time systems at relative low cost.},
booktitle = {Proceedings of the ISSTA 2006 Workshop on Role of Software Architecture for Testing and Analysis},
pages = {28–38},
numpages = {11},
location = {Portland, Maine},
series = {ROSATEA '06}
}

@inproceedings{GHH+06,
author = {Giese, Holger and Henkler, Stefan and Hirsch, Martin and Klein, Florian},
title = {Nobody's Perfect: Interactive Synthesis from Parametrized Real-Time Scenarios},
year = {2006},
isbn = {1595933948},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1138953.1138967},
doi = {10.1145/1138953.1138967},
abstract = {As technical systems keep growing more complex and sophisticated, designing software for the safety-critical coordination between their components becomes increasingly difficult. Verifying and correcting these components already represents a significant part of the development process both with respect to time and cost. Scenario-based synthesis has been put forward as an approach to accelerate the transition from requirements to a correct, verified model. In (8), we have presented a synthesis technique for deriving pattern behavior from a set of timed scenarios with parametrized time constraints. The derived patterns can then be verified using our technique for the compositional formal verification of Mechatronic UML models as introduced in (10). In this paper, we argue that the practical relevance of a synthesis technique predominantly depends rather on its ability to identify and point to specification errors than the complexity of the scenarios it could, in theory, process, provided with a correct specification. By means of a case study, we introduce the different types of specification errors that may arise during synthesis. Using our tools for modeling, synthesis, and verification, we then show how we can identify and resolve these errors in the successive phases of an interactive development process.},
booktitle = {Proceedings of the 2006 International Workshop on Scenarios and State Machines: Models, Algorithms, and Tools},
pages = {67–74},
numpages = {8},
keywords = {model checking, scenario-based synthesis, diagnosis, patterns},
location = {Shanghai, China},
series = {SCESM '06}
}

